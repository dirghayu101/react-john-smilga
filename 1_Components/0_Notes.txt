 Quick notes for reference:

1. Try to break the repetitive part into components. The more you break down a page, the better it is to manage it and make changes in the future. Also facilitates reusing and updating.


2. Whatever asset you will place in the public folder of the react will become instantly available. Create an image file in the react folder to store it. But this is not considered an optimal option as the images stored would not get optimized. Covered further in point 11.


3. If you want to give inline CSS, you have to pass it as a javascript object.
Example: const styleObj = {display: 'flex'; fontWeight: '400'; fontSize: '3rem';}
<Component style={styleObj} />
or
<Component style={{display: 'flex'; fontWeight: '400'; fontSize: '3rem';}} />
The values in the object should be of string type.


4. If you give inline CSS for an element, you cannot change it using JS later on as the precedence for inline CSS is higher. When you install some external libraries, they might have used inline CSS and you won't be able to modify them using JS, so keep that in mind while you work with them.


5. Try to avoid inline styles as much as possible. Always go for external CSS.


6. The JSX should be an expression not a statement. 
So, this is not allowed: <p>{let x = 6}</p>
This is not allowed because it is a statement.
While this will be allowed <p>{92+84}</p>


7. To use number, we use curly brackets/JSX syntax.
<Book title="random title" number={22} /> not "22"


8. For every component there will be a props. And anything you pass while calling that component will be stored as key value pairs in the prop.
<Book name="Something" copiesSold={230000}/>
const Book = (prop) => <>{props.name}</>;
or, const Book = ({name, copiesSold}) => <>{name}</>


9. The children props.
One of the default props in react is the children prop. Let's say there is a bunch of similar components but you want to make one of them a little bit different. How would you do that?
You will use the "children" property of props.
const Button = (props) => <>{props.children}</> {/*When a children props will be passed, it will be rendered.*/}
const MainComponent = () => {
    return (
        <>
            <Button/> {/*This button has no children component.*/}
            <Button> {/*This button has a children component.*/}
                <p>This is the children component body.</p>
                <button>A button.</button>
            </Button>
        </>
    )
}


10. When you use the map method to iterate over an array in react, you have to pass a property called key.

Like this:
    {bookList.map((book) => {
        const {img, title, author, id} = book
        return <Book img={img} author={author} title={title} key={id}/>;
    })}

This key is a prop that you need to provide. Now, people might use several ways to deal with it, like I did by using a package for generating random key and assigning it as the key value.

And also by using the second default property of a map method:
    {bookList.map((book, index) => {
        const {img, title, author, id} = book
        return <Book img={img} author={author} title={title} key={index}/>
    })}

Now in this approach, the value of index will vary and you cannot ensure that each of the element will get the same index value every time. Which has happened with me.

So, react will constantly keep rendering the prop repetitively. So, this second approach is not recommended.


11. You should store any images in the src directory. The reason is that react optimizes those images and make there rendering faster. 

You are normally suppose to store images in the public directory. But if you store it there, they won't get optimized by react.

When you put an image in the src folder though, you have to import each one of them. They don't get instantly available like in case of public folder.

Example:
    import img1 from './images/book-1.jpg';
    import img2 from './images/book-2.jpg';
    import img3 from './images/book-3.jpg';

In case of public:
    export const books = [
        {
            author: 'Jordan Moore',
            title: 'Interesting Facts For Curious Minds',
            img: './images/book-1.jpg',
            id: 1,
        },
    ]

In case of src:
    export const books = [
        {
            author: 'Jordan Moore',
            title: 'Interesting Facts For Curious Minds',
            img: img1,
            id: 1,
        },
    ]

Each image will require an import statement.


12. To build the production ready application use "npm run build". You can then upload it on netlify.


13. CSS is not scoped in a react application. It will load it all together. So, handling CSS is quite tricky, the best way is to use styled components or some framework.

14. Let's say you have a function defined and called like this in the body of a component:

    const ExampleComponent = () => {
        const theFunction = () => {
            console.log("Hello, World!");
        }
        theFunction();
        return <div>
            <h1>Hello, Joshi!</h1>
        </div>
    }

How many times do you think will theFunction() get called?
-> It happens during mounting. And also it happens every time when the component re-renders.

Why does this thing matter?
-> Because this can lead to an infinite loop like in this situation:
    const ExampleComponent = () => {
        const [value, setValue] = useState(0);
        const theFunction = () => {
            console.log("Hello, World!");
            setValue(value + 1)
        }
        theFunction();
        return <div>
            <h1>Hello, Joshi!</h1>
        </div>
    }

The setValue method will make it an infinite loop, as the value i.e. state will keep changing and the component will keep re-rendering.