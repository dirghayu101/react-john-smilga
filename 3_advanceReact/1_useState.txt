1-> The long form of declaration of useState hook:
        const value = useState()[0];
        const handler = useState()[1];
    
    The short form declaration which is usually used:
        const [value, handler] = useState(defaultValue);


2-> Concept of rendering: In a React application, the initial render is the first time that the component tree is rendered to the DOM. It happens when the application first loads, or when the root component is first rendered. This is also known as "mounting" the components.


3-> Re-rendering: Re-renders, on the other hand, happen when the component's state or props change, and the component needs to be updated in the DOM to reflect these changes. React uses a virtual DOM to optimize the process of updating the actual DOM, so that only the necessary changes are made.


3-> Vanilla Javascript doesn't rerender things. So, you won't really see any changes. So while using react, you have to use useState hook to make changes that you usually make using javascript.


4-> How to trigger re-rendering in react?

    There are following ways to trigger re-rendering:
    a> By changing the component's state or props. When the component's state or props change, React will re-render the component to reflect these changes.
    b> When the parent element re-renders, even if the component's state or props have not changed.


5-> There are some rules that you have to follow while using hooks in react:
    a> starts with "use" (both -react and custom hooks) -> Declaration start with use.
    b> component must be uppercase.
    c> invoke inside function/component body -> You cannot declare a hook outside a component (globally).
    d> don't call hooks conditionally (cover later) -> You cannot declare a hook within the scope of if-else statement.
    e> set functions don't update state immediately (cover later) -> It is asynchronous. So, it is kind of unprecedented (can use await).


6-> Important for interviews - Let's say you are using multiple useState hooks and the states are changing on each one of those. Will the page re-render the same number of times as there are number of hooks?

React uses the technique of automatic batching to handle such cases.

In React, "batching" refers to the process of grouping multiple state updates into a single update. This can be useful in certain cases because it allows React to optimize the rendering of your components by minimizing the number of DOM updates that it has to perform.

By default, React uses a technique called "auto-batching" to group state updates that occur within the same event loop into a single update. This means that if you call the state update function multiple times in a short period of time, React will only perform a single re-render for all of the updates.

React 18 ensures that state updates invoked from any location will be batched by default. This will batch state updates, including native event handlers, asynchronous operations, timeouts, and intervals.


7-> Important point - Asynchronous behavior of useState - Have a look at the following code:
    const useStateGotcha = () => {
        const [value, setValue] = useState(0);
        const handleClick = () => {
            setValue(value + 1);
            console.log(value);
        }
        return(
            <>
                <h1>{value}</h1>
                <button type='button' className='btn' onClick={handleClick}>
                increase
                </button>
            </>
        )
    }

At the line 49, you are logging the state of value. 

And because of the asynchronous nature it won't be the same as one getting displayed. Because setValue is asynchronous.

So, why does this matter?
-> If you try to perform some operation, an anomaly might occur. So you have to keep this in mind.


8-> One way of solving the above problem is this:

    const useStateGotcha = () => {
        const [value, setValue] = useState(0);
        const handleClick = () => {
            setValue((currentState) => {
                const newState = currentState + 1;
                return newState;
            })
            console.log(value);
        }
        return(
            <>
                <h1>{value}</h1>
                <button type='button' className='btn' onClick={handleClick}>
                increase
                </button>
            </>
        )
    }