Let's say you have a function defined and called like this in the body of a component:

    const ExampleComponent = () => {
        const theFunction = () => {
            console.log("Hello, World!");
        }
        theFunction();
        return <div>
            <h1>Hello, Joshi!</h1>
        </div>
    }

How many times do you think will theFunction() get called?
-> It happens during mounting. And also it happens every time when the component re-renders.

Why does this thing matter?
-> Because this can lead to an infinite loop like in this situation:
    const ExampleComponent = () => {
        const [value, setValue] = useState(0);
        const theFunction = () => {
            console.log("Hello, World!");
            setValue(value + 1)
        }
        theFunction();
        return <div>
            <h1>Hello, Joshi!</h1>
        </div>
    }

The setValue method will make it an infinite loop, as the value i.e. state will keep changing and the component will keep re-rendering.

And also, this is not allowed:

    const Example = () => {
        const [condition, setCondition] = useState(true);
        if (condition) {
            // won't work
            const [state, setState] = useState(false);
        }
        return <h2>example</h2>;
    };

Because this can lead to a condition of infinite loop again.

This is also not allowed:

const Example = () => {
  const [condition, setCondition] = useState(true);
  if (condition) {
    return <h2>Hello There</h2>;
  }

  //this will also fail
  useEffect(() => {
    console.log('hello there');
  }, []);
  
  return <h2>example</h2>;
};

You are using useEffect hook after already returning some value.